CREATE SEQUENCE IF NOT EXISTS hibernate_sequence START WITH 10 INCREMENT BY 1;

CREATE TABLE database
(
    id            INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name          VARCHAR(255),
    created_at    TIMESTAMP WITHOUT TIME ZONE,
    password      VARCHAR(255),
    money_amount  DECIMAL,
    database_type VARCHAR(255),
    tariff_id     INTEGER,
    user_id       BIGINT,
    CONSTRAINT pk_database PRIMARY KEY (id)
);

CREATE TABLE database_tariff
(
    id             INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name           VARCHAR(255)                             NOT NULL,
    cost_per_month DECIMAL DEFAULT 0,
    max_size_bytes BIGINT,
    CONSTRAINT pk_databasetariff PRIMARY KEY (id)
);

CREATE TABLE payment
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    date        date DEFAULT current_date,
    sum         DECIMAL,
    user_id     BIGINT,
    description VARCHAR(255),
    CONSTRAINT pk_payment PRIMARY KEY (id)
);

CREATE TABLE user_api
(
    id            INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    api_key       VARCHAR(255),
    is_protected  BOOLEAN,
    api_tariff_id INTEGER,
    database_id   INTEGER,
    name          VARCHAR(255),
    user_id       BIGINT,
    CONSTRAINT pk_userapi PRIMARY KEY (id)
);

CREATE TABLE user_api_request
(
    id               INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_api_id      INTEGER,
    request_name     VARCHAR(255),
    request_template VARCHAR(255),
    http_method      VARCHAR(255),
    CONSTRAINT pk_userapirequest PRIMARY KEY (id)
);

CREATE TABLE user_api_request_argument
(
    id                    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    arg_name              VARCHAR(255),
    request_argument_type VARCHAR(255),
    api_request_id        BIGINT,
    CONSTRAINT pk_userapirequestargument PRIMARY KEY (id)
);

CREATE TABLE user_api_tariff
(
    id             INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name           VARCHAR(255)                             NOT NULL,
    cost_per_month DECIMAL DEFAULT 0,
    requests_count INTEGER,
    CONSTRAINT pk_userapitariff PRIMARY KEY (id)
);

CREATE TABLE user_role
(
    user_id BIGINT NOT NULL,
    roles   VARCHAR(255)
);

CREATE TABLE usr
(
    id                 BIGINT NOT NULL,
    username           VARCHAR(255),
    internal_username  VARCHAR(255),
    password           VARCHAR(255),
    email              VARCHAR(255),
    refresh_token_uuid UUID,
    money_amount       DECIMAL,
    CONSTRAINT pk_usr PRIMARY KEY (id)
);

ALTER TABLE usr
    ADD CONSTRAINT uc_usr_email UNIQUE (email);

ALTER TABLE usr
    ADD CONSTRAINT uc_usr_internalusername UNIQUE (internal_username);

ALTER TABLE usr
    ADD CONSTRAINT uc_usr_username UNIQUE (username);

ALTER TABLE database
    ADD CONSTRAINT FK_DATABASE_ON_TARIFF FOREIGN KEY (tariff_id) REFERENCES database_tariff (id);

ALTER TABLE database
    ADD CONSTRAINT FK_DATABASE_ON_USER FOREIGN KEY (user_id) REFERENCES usr (id);

ALTER TABLE payment
    ADD CONSTRAINT FK_PAYMENT_ON_USER FOREIGN KEY (user_id) REFERENCES usr (id);

ALTER TABLE user_api_request_argument
    ADD CONSTRAINT FK_USERAPIREQUESTARGUMENT_ON_API_REQUEST FOREIGN KEY (api_request_id) REFERENCES user_api_request (id);

ALTER TABLE user_api_request
    ADD CONSTRAINT FK_USERAPIREQUEST_ON_USER_API FOREIGN KEY (user_api_id) REFERENCES user_api (id);

ALTER TABLE user_api
    ADD CONSTRAINT FK_USERAPI_ON_API_TARIFF FOREIGN KEY (api_tariff_id) REFERENCES user_api_tariff (id);

ALTER TABLE user_api
    ADD CONSTRAINT FK_USERAPI_ON_DATABASE FOREIGN KEY (database_id) REFERENCES database (id);

ALTER TABLE user_api
    ADD CONSTRAINT FK_USERAPI_ON_USER FOREIGN KEY (user_id) REFERENCES usr (id);

ALTER TABLE user_role
    ADD CONSTRAINT fk_user_role_on_user FOREIGN KEY (user_id) REFERENCES usr (id);